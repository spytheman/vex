var searchModuleIndex = ["README","ctx","html","mime","router","server","utils",];
var searchIndex = ["Cookie","Req","parse_cookies","parse_files","parse_form","parse_headers","parse_query","Resp","headers_bytes","permanent_redirect","redirect","send","send_file","send_html","send_json","send_status","set_cookies","HandlerFunc","MiddlewareFunc","error_route","FormData","Tag","str","is_text","html","BlockTagConfig","html","block","meta","link","style","tag","br","MimeType","map[string]MimeType","charset","content_type","extension","lookup","GroupCallbackFn","Router","receive","respond_error","inject","route","group","use","new","Method","Route","str","find","extract_route_path","map[string]&Route","route","group","use","Router","serve","green_log","yellow_log","red_log","status_code_msg","identify_mime",];
var searchModuleData = [["![Logo](https://github.com/nedpals/vex/raw/master/vex.svg)","index.html"],[" ","ctx.html"],[" ","html.html"],["# vex.mime","mime.html"],[" ","router.html"],[" ","server.html"],[" ","utils.html"],];
var searchData = [["ctx","","ctx.html#Cookie","struct "],["ctx"," Server request data ","ctx.html#Req","struct "],["ctx"," parse_cookies parses the Cookie header content and returns the  content. Return","ctx.html#Req.parse_cookies","fn (Req)"],["ctx"," parse_files parses the `multipart/form-data` content-type ","ctx.html#Req.parse_files","fn (Req)"],["ctx"," parse_form parses the body based on its provided content-type  and returns the ","ctx.html#Req.parse_form","fn (Req)"],["ctx"," parse_headers parses and injects the raw_headers into  the request struct. Used","ctx.html#Req.parse_headers","fn (Req)"],["ctx"," parse_query parses the raw query string from the request  and returns a map of ","ctx.html#Req.parse_query","fn (Req)"],["ctx"," Server response data ","ctx.html#Resp","struct "],["ctx","","ctx.html#Resp.headers_bytes","fn (Resp)"],["ctx","","ctx.html#Resp.permanent_redirect","fn (Resp)"],["ctx"," redirect writes a 301 response and redirects to the   specified url or location","ctx.html#Resp.redirect","fn (Resp)"],["ctx"," send writes the body and status code to the response data. ","ctx.html#Resp.send","fn (Resp)"],["ctx"," send_file writes the contents of the file to the response data. ","ctx.html#Resp.send_file","fn (Resp)"],["ctx"," send_html writes the body to the response data as an HTML content ","ctx.html#Resp.send_html","fn (Resp)"],["ctx"," send_json is a generic function that encodes the payload and  writes the JSON s","ctx.html#Resp.send_json","fn (Resp)"],["ctx"," send_status sends an HTML response of the status code ","ctx.html#Resp.send_status","fn (Resp)"],["ctx","","ctx.html#Resp.set_cookies","fn (Resp)"],["ctx","","ctx.html#HandlerFunc","type "],["ctx","","ctx.html#MiddlewareFunc","type "],["ctx","","ctx.html#error_route","fn "],["ctx","","ctx.html#FormData","struct "],["html","","html.html#Tag","struct "],["html"," return the tag to encoded JSON ","html.html#Tag.str","fn (Tag)"],["html"," is_text returns true if the tag name is empty and if the tag text is not empty.","html.html#Tag.is_text","fn (Tag)"],["html"," html returns the HTML output of the contents of the Tag struct. ","html.html#Tag.html","fn (Tag)"],["html","","html.html#BlockTagConfig","struct "],["html"," html returns a Tag equivalent to `<!DOCTYPE html><html>...</html>` ","html.html#html","fn "],["html"," block is the same as `tag` but with Tag children ","html.html#block","fn "],["html"," meta returns a Tag equivalent to `<meta />` ","html.html#meta","fn "],["html"," link returns a Tag equivalent to `<link />` ","html.html#link","fn "],["html"," style returns a Tag equivalent to `<style>...</style>` ","html.html#style","fn "],["html"," tag returns itself for uniformity when using function-based DSL ","html.html#tag","fn "],["html"," br returns a Tag equivalent to `<br />` ","html.html#br","fn "],["mime","","mime.html#MimeType","struct "],["mime","","mime.html#map[string]MimeType","type "],["mime"," charset returns the character set of a specific content type. ","mime.html#map[string]MimeType.charset","fn (map[string]MimeType)"],["mime"," content_type returns full content-type header given a content-type or extension","mime.html#map[string]MimeType.content_type","fn (map[string]MimeType)"],["mime"," extension returns the default extension of a specific content-type ","mime.html#map[string]MimeType.extension","fn (map[string]MimeType)"],["mime"," lookup searches and returns the content-type associated with the provided file ","mime.html#map[string]MimeType.lookup","fn (map[string]MimeType)"],["router","","router.html#GroupCallbackFn","type "],["router","","router.html#Router","struct "],["router","","router.html#Router.receive","fn (Router)"],["router","","router.html#Router.respond_error","fn (Router)"],["router","","router.html#Router.inject","fn (Router)"],["router"," route is a shortcut method to `r.routes.route` method ","router.html#Router.route","fn (Router)"],["router"," group is a shortcut method to `r.routes.group` method ","router.html#Router.group","fn (Router)"],["router"," use registers handlers as app-wide middlewares ","router.html#Router.use","fn (Router)"],["router","","router.html#new","fn "],["router"," List of supported HTTP methods. ","router.html#Method","enum "],["router","","router.html#Route","struct "],["router"," empty str to avoid cgen error ","router.html#Route.str","fn (Route)"],["router"," find searches the matching route and returns the injected params data and the r","router.html#Route.find","fn (Route)"],["router"," extract_route_path returns the name, the parameter name (if present),  and the ","router.html#extract_route_path","fn "],["router","","router.html#map[string]&Route","type "],["router"," route creates a new route based on the given method, path, and the handlers.  S","router.html#map[string]&Route.route","fn (map[string]&Route)"],["router"," group adds a series of routes into the desired prefix ","router.html#map[string]&Route.group","fn (map[string]&Route)"],["router","","router.html#map[string]&Route.use","fn (map[string]&Route)"],["server","","server.html#Router","interface "],["server"," serve starts the server at the give port ","server.html#serve","fn "],["utils","","utils.html#green_log","fn "],["utils","","utils.html#yellow_log","fn "],["utils","","utils.html#red_log","fn "],["utils"," status_code_msg returns the message of the given status code.  returns \"Intern","utils.html#status_code_msg","fn "],["utils"," identify_mime returns the MIME content type of a filename. ","utils.html#identify_mime","fn "],];
